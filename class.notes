

Angular new projects
npm install -g @angular/cli
ng new my-dream-app
cd my-dream-app
ng serve

npm - NodeJS package manager

npm install -g @angular/cli/latest



/home/developer/.nvm/versions/node/v12.18.1/bin/node /home/developer/.nvm/versions/node/v12.18.1/lib/node_modules/npm/bin/npx-cli.js --ignore-existing --package @angular/cli ng new angular --defaults
Node.js version v12.18.1 detected.
The Angular CLI requires a minimum Node.js version of either v12.20, v14.15, or v16.10.



1. Angular is a JavaScript framework for building reactive single-page-applications.
The reactiveness is achieved via JavaScript changes the DOM, the HTML code during the runtime.

4. Angular versioning.
AngularJS (Angular 1).
Angular 2 released in 2016. A new version every 6 months. Small, incremental, backwards-compatible changes.

6.
Project setup
npm install -g @angular/cli@latest
ng new my-first-app
cd my-first-app
ng serve
http://localhost:4200

Node.NodeJS - used by the CLI to bundle the Angular project dependencies

Angular uses TypeScript, a superset of JavaScript.

7. Editing the first app
WebStorm
Visual Studio Code

my-first-src/index.html
    <app-root></app-root>

my-first-app/src/app/
    app.component.html
    app.component.ts
    app.module.ts

Data binding 
{{component-variable-name}}

Directive - two-way data binding
[[ngModel]]="component-variable-name"

8. Course structure
Getting Started --> the basics --> component & data binding --> directives --> services and dependency injection --> routing --> observables --> forms --> pipes --> http --> authentication --> optimizations and NgModules --> deployment --> animations and testing

9. How to get the most out of the course

10. What is TypeScript?
it's a superscript of vanilla JS: it has types, classes, interface, it is checked at compilation time, it is compiled to JavaScript

11. A basic project setup using Bootstrap for styling 

npm install --save bootstrap@latest 

angular.json
    "architect": {
        "build": {
            "styles": [
                "node_modules/bootstrap/dist/css/bootstrap.min.css",
                "src/styles.css"
            ]
            ... } ...}


13. Module introduction            
14. How an Angular app gets loaded and Started
index.html is the file served by the http web server
    <app-root>loading...</app-root>
app.component.ts  
    @Component({
        selector:"app-root",
        templateUrl:"./app.component.html",
        styles:"./app.component.css"
    })
    export class AppComponent {}
main.ts 
    platformBrowserDynamic().bootstrapModule(AppModule);
app.modules.ts
    import { BrowserModule } from '@angular/platform-browser';
    import { NgModule } from '@angular/core';
    import { FormsModule } from '@angular/forms';
    import { HttpModule } from '@angular/http';
    import { AppComponent } from './app.component';
    import { ServerComponent } from './server/server.component';
    @NgModule ({
        declarations: [
            AppComponent,
            ServerComponent
        ],
        imports: [
            BrowserModule,
            FormsModule,
            HttpModule
        ],
         providers: [],
        bootstrap: [AppComponent]
    })
    export class AppModule {} 

15. Components
business logic
template
styles

16. Creating a new component
src/app/server
server.component.ts
    import { Component } from '@angular/core';
    @Component ({         //--> this is a decorator
        selector: 'app-server',
        templateUrl: './server.component.html',
        styles: '
    })
    export class ServerComponent {

    }
server.component.html

17. Understanding the role of AppModule and component declaration
A module is a bundle of functionalities of the application.

18. Using custom component
app.component.html 
    <app-server></app-server>

19. Creating components with CLI and nesting components
ng generate component servers
ng g c servers

servers.component.html
    <app-server></app-server>
    <app-server></app-server>
servers.component.ts
    @Component

20. Working with component templates
servers.component.ts
    @Component ({
        selector:'app-servers',
        template: '<app-server></app-server><app-server></app-server>',
        styleUrls: ['./servers.component.css']
    })
    export class ServersComponent implement OnInit {
        constructor() {}

        ngOnInit() {}
    }
OR    
servers.component.ts
    @Component ({
        selector:'app-servers',
        template: `
            <app-server></app-server>
            <app-server></app-server>`,
        styleUrls: ['./servers.component.css']
    })
    export class ServersComponent implement OnInit {
        constructor() {}

        ngOnInit() {}
    }

21. Working with component styles
app.component.html
    <div class="container">
        <div class="row">
            <div class="col-xs-12">
                <h3>I'm in the app component!</h3>
                <hr>
                <app-server></app-servers>
            </div>
        </div>
    </div>
app.component.css
    h3 {
        color: darkblue;
    }    
OR 
servers.component.ts
    @Component ({
        selector:'app-servers',
        templateUrl: './app-servers.component.html',
        // styleUrls: ['./servers.component.css'
        styles: [`
            h3 {
                color: dodgeblue;
            }
        `]
    })
    export class ServersComponent implement OnInit {
        constructor() {}
        ngOnInit() {}
    }

22. Component selector
The component selector follows the same rules as the CSS selectors.
servers.component.ts
    @Component ({
        selector:'app-servers',
        // selector:'[app-servers]',
        // selector:'.app-servers',
        templateUrl: './app-servers.component.html',
        // styleUrls: ['./servers.component.css'
        styles: [`
            h3 {
                color: dodgeblue;
            }
        `]
    })
    export class ServersComponent implement OnInit {
        constructor() {}
        ngOnInit() {}
    }
app.component.html
    <app-servers></app-servers>
    <!-- <div app-servers></div> -->
    <!-- <div class="app-servers"></div> -->

24. What is data binding 
TypeScrip code (business logic) <- data binding-> Template (HTML)
Data binding types:
    Output data:
        String Interpolation: {{ data }}
        Property binding: [property]="data"
    React to User Events:
        Event binding:
            (event)="expression"
    Two-way-binding:
        [(ngModel)]="data"

25. String Interpolation   
server.component.ts    
    serverId = 10;
    getServerStatus() {
        return 'offline';
    }
server.component.html
    The server {{ serverId }} is {{ getServerStatus() }}.

26. Property binding
servers.component.html 
    <button class="btn btn-primary"
        [disabled]="!allowNewServer">Add Button</button>     
server.component.ts
    allowNewServer  false;
    constructor () {
        setTimeout( () => {                      //ES6 arrow function
            this.allowNewServer = true;
        } , 2000)
    }

27. Property binding vs. string interpolation
To print a value to the page use string interpolation.
To change a property of an HTML element or of a directive or a component use property binding.

28. Event binding
servers.component.html
    <p> {{ serverCreationStatus }} </p>
    <button class="btn btn--primary"
        [disabled]="!allowNewServer"
        (click)="onCreateSever()">Add Server</button>
servers.component.ts
    serverCreationStatus = 'No server was created!';
    onCreateSever() {
        this.serverCreationStatus = 'A server was created';
    }

29. Passing and using data with event binding
servers.component.html
    <p> {{ serverCreationStatus }} </p>
    <input
        type="text"
        class="form-control"
        (input)="onUpdateServerName()">
    <p>{{ serverName }}</p>
    <button class="btn btn--primary"
        [disabled]="!allowNewServer"
        (click)="onCreateSever($event)">Add Server</button>  <!-- $event-->
servers.component.ts
    serverCreationStatus = 'No server was created!';
    serverName='';
    onCreateSever() {
        this.serverCreationStatus = 'A server was created';
    }
    onUpdateServerName(even: Event) {
        //console.log(event);
        this.serverName = (<HTMLInputElement>event.target).value;
    }

30. Two-way data binding
servers.component.html
    <p> {{ serverCreationStatus }} </p>
    <input
        type="text"
        class="form-control"
        (input)="onUpdateServerName()">
    <input
        type="text"
        class="form-control"
        [(ngModel)]="serverName>
    <p>{{ serverName }}</p>
    <button class="btn btn--primary"
        [disabled]="!allowNewServer"
        (click)="onCreateSever($event)">Add Server</button>  <!-- $event-->
servers.component.ts
    serverCreationStatus = 'No server was created!';
    serverName = 'Test server name';
    onCreateSever() {
        this.serverCreationStatus = 'A server was created';
    }
    onUpdateServerName(even: Event) {
        //console.log(event);
        this.serverName = (<HTMLInputElement>event.target).value;
    }

33. Combining all forms of data binding

35. Directives
Directives are instructions in the DOM.
Components are directives with templates.
Custom directives
Built-in structural directives: *ngIf, *ngFor - they add or remove elements, so they change the DOM
Built-in attribute directives: ngStyle, ngClass - they only change the element they were placed on

36. ngIf - Angular built-in structural directive
servers.component.html
    <p> {{ serverCreationStatus }} </p>
    <input
        type="text"
        class="form-control"
        [ngModel)]="serverName">
    <button class="btn btn--primary"
        [disabled]="!allowNewServer"
        (click)="onCreateSever()">Add Server</button>
    <p *ngIf="serverCreated">Server was created, server name is {{ serverName }}</p>
servers.component.ts
    serverCreated = false;
    serverCreationStatus = 'No server was created!';
    serverName = 'Test server name';
    onCreateSever() {
        this.serverCreationStatus = 'A server was created';
        this.serverCreated = true;
    }
    onUpdateServerName(even: Event) {
        //console.log(event);
        this.serverName = (<HTMLInputElement>event.target).value;
    }

37. ngIf with an else condition
servers.component.html
    <p *ngIf="serverCreated; else noServer">Server was created, server name is {{ serverName }}</p>
    <ng-template #noServer>
        <p>No server was created</p>
    </ng-template>

38. ngStyle - Angular built-in attribute directive
server.component.ts
    serverId = 10;
    serverStatus = 'offline';
    constructor() {
        this.serverStatus = Math.random() > 0.5 ? 'online' : 'offline';
    }
    getServerStatus() {
        return this.serverStatus;
    }
    getColor() {
        return this.serverStatus === 'online' ? 'green' : 'red' ;
    }
server.component.html
    <p [ngStyle]="{backgroundColor: getColor()}"=< server with ID {{ serverId }} is {{ getServerStatus() }}</p>

39. ngClass - built-in attribute directive
server.component.html
    <p [ngClass]="{online: serverStatus === 'online'}"=< server with ID {{ serverId }} is {{ getServerStatus() }}</p>

40. *ngFor - Angular built-in structural directive
servers.component.ts
    servers = ['test server 1', 'test server 2'];
    serverName = 'test server';
    onUpdateServerName(event: Event) {
        this.serverName = (<HTMLInputElement>event.target).value;
    }
    onCreateServer() {
        this.serverCreated = true;
        this.servers.push(this.serverName);
        this.serverCreationStatus = 'Server was created and its name is ' + this.serverName;
    }
servers.component.ts
    <app-server *ngFor="let server of servers"></app-server>

42. Getting the index when using *ngFor
app.component.html
    <div *ngFor="let logItem of log; let i = index"
        [ngStyle]="{backgroundColor: i >= 4 ? 'blue' : 'transparent'}"
        [ngClass]="{'white-text': i >= 4}"
    >{{ logItem }}</div>

43. Course project
44. Planning the application
Features and components: 
    Shopping List
        Shopping list
        Shopping list edit
    Recipe Book    
        Recipe list 
        Recipes component
            Recipe item
            Recipe detail
Components:
    Root 
    Header 
Models:
    Ingredient
    